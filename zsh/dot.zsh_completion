#!/usr/bin/env zsh
# vim: set ft=zsh ts=2 sw=2 sts=0 noet :

# aws-cli completion
#
if [[ -r "$(whence -- aws_zsh_completer.sh)" ]]; then
	source "$(whence -- aws_zsh_completer.sh)"
fi
# golang initilize
#
if [[ -r "/usr/local/share/zsh/site-functions/go" ]]; then
	source "/usr/local/share/zsh/site-functions/go"
fi
# golangci-lint completion
#
if [[ -x "$(whence -- golangci-lint)" ]]; then
	source <(golangci-lint completion zsh)
fi
# lefthook completion
#
if [[ -x "$(whence -- lefthook)" ]]; then
	source <(lefthook completion zsh)
fi
# anyenv initilize
#
if [[ -x "$(whence -- anyenv)" ]]; then
	eval "$(anyenv init -)"
fi
# goenv initilize
#
if [[ -x "$(whence -- goenv)" ]]; then
	eval "$(goenv init -)"
	path=(
		${GOROOT}/bin(N-/)
		"$path[@]"(N)
		${GOPATH}/bin(N-/)
	)
	typeset -U path
fi
# rustup initilize
#
if [[ -x "$(whence -- rustup)" ]]; then
	source <(rustup completions zsh)
fi
# buf build completion
#
if [[ -x "$(whence -- buf)" ]]; then
	source <(buf completion zsh)
fi
# kubectl completion
#
if [[ -x "$(whence -- kubectl)" ]]; then
	source <(kubectl completion zsh)
fi
# kubeadm completion
#
if [[ -x "$(whence -- kubeadm)" ]]; then
	source <(kubeadm completion zsh)
fi
# minikube completion
#
if [[ -x "$(whence -- minikube)" ]]; then
	source <(minikube completion zsh)
fi
# docker completion
#
if [[ -x "$(whence -- docker)" ]]; then
	source <(docker completion zsh)
fi
# vault completion
#
if [[ -x "$(whence -- vault)" ]]; then
	complete -o nospace -C "$(whence -- vault)" vault
fi
# terraform completion
#
if [[ -x "$(whence -- terraform)" ]]; then
	complete -o nospace -C "$(whence -- terraform)" terraform
fi
# opentofu completion
#
if [[ -x "$(whence -- tofu)" ]]; then
	complete -o nospace -C "$(whence -- tofu)" tofu
fi
# nomad completion
#
if [[ -x "$(whence -- nomad)" ]]; then
	complete -o nospace -C "$(whence -- nomad)" nomad
fi
# aqua completion
#
if [[ -x "$(whence -- aqua)" ]]; then
	source <(aqua completion zsh)
fi
# 1password-cli completion
#
if [[ -x "$(whence -- op)" ]]; then
	source <(op completion zsh)
	compdef _op op
fi
# lima completion
#
if [[ -x "$(whence -- limactl)" ]]; then
	source <(limactl completion zsh)
	compdef _limactl limactl
fi
# linuxkit completion
#
if [[ -x "$(whence -- linuxkit)" ]]; then
	source <(linuxkit completion zsh)
	compdef _linuxkit linuxkit
fi
# oras completion
#
if [[ -x "$(whence -- oras)" ]]; then
	source <(oras completion zsh)
	compdef _oras oras
fi
# hugo completion
#
if [[ -x "$(whence -- hugo)" ]]; then
	if completion="$(hugo completions zsh 2>/dev/null)"; then
		source <(echo "${completion}") 2>/dev/null
		compdef _hugo hugo
	fi
fi
# yq completion
#
if [[ -x "$(whence -- yq)" ]]; then
	if completion="$(yq shell-completion zsh 2>/dev/null)"; then
		source <(echo "${completion}")
		compdef _yq yq
	fi
fi
# deno completion
#
if [[ -x "$(whence -- deno)" ]]; then
	if completion="$(deno completions zsh 2>/dev/null)"; then
		source <(echo "${completion}") 2>/dev/null
		compdef _deno deno
	fi
fi
# aws-nuke completion
#
if [[ -x "$(whence -- aws-nuke)" ]]; then
	if completion="$(aws-nuke completion zsh 2>/dev/null)"; then
		source <(echo "${completion}")
		compdef _aws-nuke aws-nuke
	fi
fi
# goreleaser completion
#
if [[ -x "$(whence -- goreleaser)" ]]; then
	if completion="$(goreleaser completion zsh 2>/dev/null)"; then
		source <(echo "${completion}")
		compdef _goreleaser goreleaser
	fi
fi
# nfpm completion
#
if [[ -x "$(whence -- nfpm)" ]]; then
	if completion="$(nfpm completion zsh 2>/dev/null)"; then
		source <(echo "${completion}")
		compdef _nfpm nfpm
	fi
fi
# trivy completion
#
if [[ -x "$(whence -- trivy)" ]]; then
	if completion="$(trivy completion zsh 2>/dev/null)"; then
		source <(echo "${completion}")
		compdef _trivy trivy
	fi
fi
# octocov completion
#
if [[ -x "$(whence -- octocov)" ]]; then
	if completion="$(octocov completion zsh 2>/dev/null)"; then
		source <(echo "${completion}")
		compdef _octocov octocov
	fi
fi
# dagger completion
#
if [[ -x "$(whence -- dagger)" ]]; then
	if completion="$(dagger completion zsh 2>/dev/null)"; then
		source <(echo "${completion}")
		compdef _dagger dagger
	fi
fi
# melange completion
#
if [[ -x "$(whence -- melange)" ]]; then
	if completion="$(melange completion zsh 2>/dev/null)"; then
		source <(echo "${completion}")
		compdef _melange melange
	fi
fi
# gotpm completion
#
if [[ -x "$(whence -- gotpm)" ]]; then
	if completion="$(gotpm completion zsh 2>/dev/null)"; then
		source <(echo "${completion}")
		compdef _gotpm gotpm
	fi
fi
# runpodctl completion
#
if [[ -x "$(whence -- runpodctl)" ]]; then
	if completion="$(runpodctl completion zsh 2>/dev/null)"; then
		source <(echo "${completion}")
		compdef _runpodctl runpodctl
	fi
fi
# aws_completer completion
#
if [[ -x "$(whence -- aws_completer)" ]]; then
	complete -C "$(whence -- aws_completer)" aws
fi
# python pip completion
#
# if [[ -x "$(whence -- pip)" ]]; then
# 	eval "$(pip completion --zsh --disable-pip-version-check)"
# fi
# if [[ -x "$(whence -- pip3)" ]]; then
# 	eval "$(pip3 completion --zsh --disable-pip-version-check)"
# fi
# vagrant completion
#
if [[ -d "/opt/vagrant/embedded/gems/gems" ]]; then
	if f=(/opt/vagrant/embedded/gems/gems/vagrant-*/contrib/zsh/_vagrant) 2>/dev/null; then
		source $f
		compdef _vagrant vagrant
	fi
fi
# dotnet completion
#
_dotnet_zsh_complete()
{
  local completions=("$(dotnet complete "$words")")
  reply=("${(ps:\n:)completions}")
}
if [[ -x "$(whence -- dotnet)" ]]; then
	compctl -K _dotnet_zsh_complete dotnet
fi
# gcloud completion
#
if [[ -r "/usr/share/google-cloud-sdk/completion.zsh.inc" ]]; then
	source "/usr/share/google-cloud-sdk/completion.zsh.inc"
fi
# pnpm completion
#
if [[ -x "$(whence -- pnpm)" ]]; then
	alias pp="pnpm"
	alias ppx="pnpx"

	if completion="$(pnpm completion zsh 2>/dev/null)"; then
		source <(echo "${completion}")
		compdef pp="pnpm"
	fi
fi
